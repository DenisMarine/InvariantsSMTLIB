       Mini-projet 2 : Synthèse d'invariants en SMTLIB

Cours de Logique, L3 Informatique, Université de Paris, 2021–2022

Dans ce projet, vous allez automatiser la synthèse d'invariants de
boucle pour un très petit langage de programmation, décrit
ci-dessous. Comme échauffement, vous écrirez d'abord un fichier
SMT-LIB à la main. Il est recommandé de lire en détail la section 16.4
des notes de cours avant de réaliser ce mini-projet.

Nous définissons un langage de programmation « WA » (While-Assert),
qui modélise des programmes Java de la forme générale suivante :

int x1 = a1;
// (...)
int xk = ak;
while (s) {
    x1 = b1;
    // (...)
    xk = bk;
}
assert (t);

Plus formellement, un _programme WA_ est défini comme un uplet `(k,
a1, ..., ak, b1, ..., bk, s, t)`, où `k` est un entier représentant le
nombre de variables utilisées par le programme, `a1`, ..., `ak` et
`b1`, ..., `bk` sont des _termes_, et `s` et `t` sont des _tests_. Les
variables utilisées dans les termes et les tests seront `x1`, ...,
`xk`, toujours de type entier. Ici, un _terme_ de WA est construit à
partir de variables et de constantes entières en appliquant les
opérations arithmétiques `+` et `*`, et un _test_ est défini comme une
formule atomique, qui compare deux termes par l'égalité ou par
l'ordre. Par exemple, le programme Java donné dans l'exercice 1
correspond, après l'application du renommage de `i` en `x1`
et de `v` en `x2`, au programme WA suivant : `(2, 0, 0, x1 + 1, x2 + 3, x1 < 3, x2 = 9)`.

Écrire une fonction OCaml `smtlib_of_wa : program -> string` qui prend
en argument un programme WA et qui renvoie un programme SMT-LIB, qui,
lorsqu'il est donné à Z3, vérifiera l'existence d'un invariant de
boucle pour le programme WA donné en argument.

Le fichier `invariants.ml` fourni avec ce mini-projet vous suggère une
définition possible des types en OCaml, ainsi qu'une subdivision de
l'exercice en cinq questions. Vous devez donc compléter le code du
fichier `invariants.ml` :

 - la fonction `str_of_term : term -> string`
 - la fonction `str_of_test : test -> string`
 - la fonction `str_condition : term list -> string`
 - la fonction `str_assert : int -> string -> string`
 - la fonction auxiliaire `loop_condition : program -> string`
 - la fonction auxiliaire `assertion_condition : program -> string`

Les types et les commentaires dans `invariants.ml` sont
indicatifs. D'autres choix peuvent être pertinents. Vous pouvez
ajouter d'autres fonctions auxiliaires.
